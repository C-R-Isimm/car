
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005378  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005538  08005538  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005540  08005540  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000104  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011377  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002108  00000000  00000000  000313b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e70  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b0e  00000000  00000000  00035250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012251  00000000  00000000  00055d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c95d4  00000000  00000000  00067faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131583  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004080  00000000  00000000  001315d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054e8 	.word	0x080054e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080054e8 	.word	0x080054e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f023 030f 	bic.w	r3, r3, #15
 80004dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	f043 030c 	orr.w	r3, r3, #12
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004f8:	7bbb      	ldrb	r3, [r7, #14]
 80004fa:	f043 030c 	orr.w	r3, r3, #12
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	f043 0308 	orr.w	r3, r3, #8
 8000508:	b2db      	uxtb	r3, r3
 800050a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800050c:	f107 0208 	add.w	r2, r7, #8
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2304      	movs	r3, #4
 8000516:	214e      	movs	r1, #78	; 0x4e
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <lcd_send_cmd+0x5c>)
 800051a:	f001 f951 	bl	80017c0 <HAL_I2C_Master_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <lcd_send_data>:

void lcd_send_data (char data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f023 030f 	bic.w	r3, r3, #15
 800053c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	011b      	lsls	r3, r3, #4
 8000542:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	f043 030d 	orr.w	r3, r3, #13
 800054a:	b2db      	uxtb	r3, r3
 800054c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	f043 0309 	orr.w	r3, r3, #9
 8000554:	b2db      	uxtb	r3, r3
 8000556:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	f043 030d 	orr.w	r3, r3, #13
 800055e:	b2db      	uxtb	r3, r3
 8000560:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f043 0309 	orr.w	r3, r3, #9
 8000568:	b2db      	uxtb	r3, r3
 800056a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800056c:	f107 0208 	add.w	r2, r7, #8
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2304      	movs	r3, #4
 8000576:	214e      	movs	r1, #78	; 0x4e
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <lcd_send_data+0x5c>)
 800057a:	f001 f921 	bl	80017c0 <HAL_I2C_Master_Transmit>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028

0800058c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    switch (row)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d003      	beq.n	80005a4 <lcd_put_cur+0x18>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d005      	beq.n	80005ae <lcd_put_cur+0x22>
 80005a2:	e009      	b.n	80005b8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005aa:	603b      	str	r3, [r7, #0]
            break;
 80005ac:	e004      	b.n	80005b8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005b4:	603b      	str	r3, [r7, #0]
            break;
 80005b6:	bf00      	nop
    }

    lcd_send_cmd (col);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff85 	bl	80004cc <lcd_send_cmd>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <lcd_init>:


void lcd_init (void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005ce:	2032      	movs	r0, #50	; 0x32
 80005d0:	f000 fc56 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005d4:	2030      	movs	r0, #48	; 0x30
 80005d6:	f7ff ff79 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005da:	2005      	movs	r0, #5
 80005dc:	f000 fc50 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e0:	2030      	movs	r0, #48	; 0x30
 80005e2:	f7ff ff73 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fc4a 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005ec:	2030      	movs	r0, #48	; 0x30
 80005ee:	f7ff ff6d 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(10);
 80005f2:	200a      	movs	r0, #10
 80005f4:	f000 fc44 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005f8:	2020      	movs	r0, #32
 80005fa:	f7ff ff67 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 fc3e 	bl	8000e80 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000604:	2028      	movs	r0, #40	; 0x28
 8000606:	f7ff ff61 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f000 fc38 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000610:	2008      	movs	r0, #8
 8000612:	f7ff ff5b 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fc32 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff ff55 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fc2c 	bl	8000e80 <HAL_Delay>
	HAL_Delay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 fc29 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800062e:	2006      	movs	r0, #6
 8000630:	f7ff ff4c 	bl	80004cc <lcd_send_cmd>
	HAL_Delay(1);
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fc23 	bl	8000e80 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800063a:	200c      	movs	r0, #12
 800063c:	f7ff ff46 	bl	80004cc <lcd_send_cmd>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800064c:	e006      	b.n	800065c <lcd_send_string+0x18>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	1c5a      	adds	r2, r3, #1
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff68 	bl	800052c <lcd_send_data>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f4      	bne.n	800064e <lcd_send_string+0xa>
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fbc2 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f8b6 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f976 	bl	800096c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000680:	f000 f94a 	bl	8000918 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000684:	f000 f91a 	bl	80008bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 8000688:	f7ff ff9f 	bl	80005ca <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart6, (uint8_t *)rx, sizeof(rx), 500);
 800068c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000690:	2201      	movs	r2, #1
 8000692:	494e      	ldr	r1, [pc, #312]	; (80007cc <main+0x15c>)
 8000694:	484e      	ldr	r0, [pc, #312]	; (80007d0 <main+0x160>)
 8000696:	f003 ff24 	bl	80044e2 <HAL_UART_Receive>
	  if (rx[0]=='F')
 800069a:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <main+0x15c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b46      	cmp	r3, #70	; 0x46
 80006a0:	d11f      	bne.n	80006e2 <main+0x72>
	 {

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1); // Moteur A
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a8:	484a      	ldr	r0, [pc, #296]	; (80007d4 <main+0x164>)
 80006aa:	f000 ff2b 	bl	8001504 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);  // Moteur A
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b4:	4847      	ldr	r0, [pc, #284]	; (80007d4 <main+0x164>)
 80006b6:	f000 ff25 	bl	8001504 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);  // Moteur B
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c0:	4844      	ldr	r0, [pc, #272]	; (80007d4 <main+0x164>)
 80006c2:	f000 ff1f 	bl	8001504 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);  // Moteur B
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006cc:	4841      	ldr	r0, [pc, #260]	; (80007d4 <main+0x164>)
 80006ce:	f000 ff19 	bl	8001504 <HAL_GPIO_WritePin>
		  lcd_put_cur(0, 5);
 80006d2:	2105      	movs	r1, #5
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff ff59 	bl	800058c <lcd_put_cur>
		  lcd_send_string ("FORWARD");
 80006da:	483f      	ldr	r0, [pc, #252]	; (80007d8 <main+0x168>)
 80006dc:	f7ff ffb2 	bl	8000644 <lcd_send_string>
 80006e0:	e06f      	b.n	80007c2 <main+0x152>

	 }


	  else if (rx[0]=='S')
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <main+0x15c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b53      	cmp	r3, #83	; 0x53
 80006e8:	d118      	bne.n	800071c <main+0xac>
	   {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4838      	ldr	r0, [pc, #224]	; (80007d4 <main+0x164>)
 80006f2:	f000 ff07 	bl	8001504 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4835      	ldr	r0, [pc, #212]	; (80007d4 <main+0x164>)
 80006fe:	f000 ff01 	bl	8001504 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4832      	ldr	r0, [pc, #200]	; (80007d4 <main+0x164>)
 800070a:	f000 fefb 	bl	8001504 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000714:	482f      	ldr	r0, [pc, #188]	; (80007d4 <main+0x164>)
 8000716:	f000 fef5 	bl	8001504 <HAL_GPIO_WritePin>
 800071a:	e052      	b.n	80007c2 <main+0x152>
	 }
	  else if (rx[0]=='B')
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <main+0x15c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b42      	cmp	r3, #66	; 0x42
 8000722:	d11f      	bne.n	8000764 <main+0xf4>
	  	   {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	482a      	ldr	r0, [pc, #168]	; (80007d4 <main+0x164>)
 800072c:	f000 feea 	bl	8001504 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000736:	4827      	ldr	r0, [pc, #156]	; (80007d4 <main+0x164>)
 8000738:	f000 fee4 	bl	8001504 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <main+0x164>)
 8000744:	f000 fede 	bl	8001504 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074e:	4821      	ldr	r0, [pc, #132]	; (80007d4 <main+0x164>)
 8000750:	f000 fed8 	bl	8001504 <HAL_GPIO_WritePin>
			  lcd_put_cur(0, 5);
 8000754:	2105      	movs	r1, #5
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff18 	bl	800058c <lcd_put_cur>
			  lcd_send_string ("BACK   ");
 800075c:	481f      	ldr	r0, [pc, #124]	; (80007dc <main+0x16c>)
 800075e:	f7ff ff71 	bl	8000644 <lcd_send_string>
 8000762:	e02e      	b.n	80007c2 <main+0x152>
	  	 }
	  else if (rx[0]=='L')
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <main+0x15c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b4c      	cmp	r3, #76	; 0x4c
 800076a:	d113      	bne.n	8000794 <main+0x124>
	  	   {

	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4818      	ldr	r0, [pc, #96]	; (80007d4 <main+0x164>)
 8000774:	f000 fec6 	bl	8001504 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <main+0x164>)
 8000780:	f000 fec0 	bl	8001504 <HAL_GPIO_WritePin>
			  lcd_put_cur(0, 5);
 8000784:	2105      	movs	r1, #5
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ff00 	bl	800058c <lcd_put_cur>
			  lcd_send_string ("LEFT   ");
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <main+0x170>)
 800078e:	f7ff ff59 	bl	8000644 <lcd_send_string>
 8000792:	e016      	b.n	80007c2 <main+0x152>
	  	 }
	  else if (rx[0]=='R')
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <main+0x15c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b52      	cmp	r3, #82	; 0x52
 800079a:	d112      	bne.n	80007c2 <main+0x152>
		  	   {

		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <main+0x164>)
 80007a4:	f000 feae 	bl	8001504 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <main+0x164>)
 80007b0:	f000 fea8 	bl	8001504 <HAL_GPIO_WritePin>
				  lcd_put_cur(0, 5);
 80007b4:	2105      	movs	r1, #5
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fee8 	bl	800058c <lcd_put_cur>
				  lcd_send_string ("RIGHT  ");
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x174>)
 80007be:	f7ff ff41 	bl	8000644 <lcd_send_string>
		  	 }

rx[0]=0;
 80007c2:	4b02      	ldr	r3, [pc, #8]	; (80007cc <main+0x15c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart6, (uint8_t *)rx, sizeof(rx), 500);
 80007c8:	e760      	b.n	800068c <main+0x1c>
 80007ca:	bf00      	nop
 80007cc:	200000c0 	.word	0x200000c0
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	08005500 	.word	0x08005500
 80007dc:	08005508 	.word	0x08005508
 80007e0:	08005510 	.word	0x08005510
 80007e4:	08005518 	.word	0x08005518

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fe6e 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <SystemClock_Config+0xcc>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <SystemClock_Config+0xd0>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2301      	movs	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2310      	movs	r3, #16
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	2302      	movs	r3, #2
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000858:	2308      	movs	r3, #8
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800085c:	23a8      	movs	r3, #168	; 0xa8
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000864:	2307      	movs	r3, #7
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fe73 	bl	8003558 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000878:	f000 f8f8 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2302      	movs	r3, #2
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2105      	movs	r1, #5
 800089a:	4618      	mov	r0, r3
 800089c:	f003 f8d4 	bl	8003a48 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008a6:	f000 f8e1 	bl	8000a6c <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3750      	adds	r7, #80	; 0x50
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C1_Init+0x50>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <MX_I2C1_Init+0x54>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_I2C1_Init+0x50>)
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_I2C1_Init+0x58>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_I2C1_Init+0x50>)
 80008da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_I2C1_Init+0x50>)
 80008fa:	f000 fe1d 	bl	8001538 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000904:	f000 f8b2 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000028 	.word	0x20000028
 8000910:	40005400 	.word	0x40005400
 8000914:	000186a0 	.word	0x000186a0

08000918 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART6_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 8000924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000928:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART6_UART_Init+0x4c>)
 8000950:	f003 fd7a 	bl	8004448 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 f887 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000007c 	.word	0x2000007c
 8000968:	40011400 	.word	0x40011400

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <MX_GPIO_Init+0xd4>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a16:	f000 fd75 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a1a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a34:	f000 fbca 	bl	80011cc <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 f9f1 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010000 	.word	0x40010000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fab3 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_I2C_MspInit+0x94>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d133      	bne.n	8000b52 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_I2C_MspInit+0x98>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <HAL_I2C_MspInit+0x98>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_I2C_MspInit+0x98>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0a:	2312      	movs	r3, #18
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b16:	2304      	movs	r3, #4
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4810      	ldr	r0, [pc, #64]	; (8000b64 <HAL_I2C_MspInit+0x9c>)
 8000b22:	f000 fb53 	bl	80011cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_I2C_MspInit+0x98>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HAL_I2C_MspInit+0x98>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_I2C_MspInit+0x98>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201f      	movs	r0, #31
 8000b48:	f000 fa76 	bl	8001038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b4c:	201f      	movs	r0, #31
 8000b4e:	f000 fa8f 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_UART_MspInit+0x94>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d133      	bne.n	8000bf2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_UART_MspInit+0x98>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0x98>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x98>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_UART_MspInit+0x98>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_UART_MspInit+0x98>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_UART_MspInit+0x98>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_UART_MspInit+0x9c>)
 8000bde:	f000 faf5 	bl	80011cc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2047      	movs	r0, #71	; 0x47
 8000be8:	f000 fa26 	bl	8001038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000bec:	2047      	movs	r0, #71	; 0x47
 8000bee:	f000 fa3f 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40011400 	.word	0x40011400
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020800 	.word	0x40020800

08000c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HAL_InitTick+0xd4>)
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <HAL_InitTick+0xd4>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6453      	str	r3, [r2, #68]	; 0x44
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <HAL_InitTick+0xd4>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c34:	f107 020c 	add.w	r2, r7, #12
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f922 	bl	8003e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c44:	f003 f90c 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c50:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <HAL_InitTick+0xd8>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9b      	lsrs	r3, r3, #18
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c5e:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_InitTick+0xe0>)
 8000c60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c82:	4818      	ldr	r0, [pc, #96]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c84:	f003 f932 	bl	8003eec <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d11b      	bne.n	8000cce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c96:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <HAL_InitTick+0xdc>)
 8000c98:	f003 f982 	bl	8003fa0 <HAL_TIM_Base_Start_IT>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d111      	bne.n	8000cce <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000caa:	2019      	movs	r0, #25
 8000cac:	f000 f9e0 	bl	8001070 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	d808      	bhi.n	8000cc8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f000 f9bc 	bl	8001038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_InitTick+0xe4>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e002      	b.n	8000cce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	200000c4 	.word	0x200000c4
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d4e:	f003 f997 	bl	8004080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000c4 	.word	0x200000c4

08000d5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C1_EV_IRQHandler+0x10>)
 8000d62:	f000 fe2b 	bl	80019bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000028 	.word	0x20000028

08000d70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <USART6_IRQHandler+0x10>)
 8000d76:	f003 fc57 	bl	8004628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000007c 	.word	0x2000007c

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dd2:	f7ff ffd7 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 fb5b 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fc49 	bl	8000670 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dec:	08005548 	.word	0x08005548
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df4:	20000110 	.word	0x20000110

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f8fc 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff feec 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe22 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	2000010c 	.word	0x2000010c

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000010c 	.word	0x2000010c

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff4c 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104a:	f7ff ff61 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800104e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f7ff ffb1 	bl	8000fbc <NVIC_EncodePriority>
 800105a:	4602      	mov	r2, r0
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff80 	bl	8000f68 <__NVIC_SetPriority>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff54 	bl	8000f2c <__NVIC_EnableIRQ>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001098:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800109a:	f7ff fee5 	bl	8000e68 <HAL_GetTick>
 800109e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d008      	beq.n	80010be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e052      	b.n	8001164 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0216 	bic.w	r2, r2, #22
 80010cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <HAL_DMA_Abort+0x62>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0208 	bic.w	r2, r2, #8
 80010fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110e:	e013      	b.n	8001138 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001110:	f7ff feaa 	bl	8000e68 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b05      	cmp	r3, #5
 800111c:	d90c      	bls.n	8001138 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2220      	movs	r2, #32
 8001122:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e015      	b.n	8001164 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1e4      	bne.n	8001110 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114a:	223f      	movs	r2, #63	; 0x3f
 800114c:	409a      	lsls	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d004      	beq.n	800118a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e00c      	b.n	80011a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2205      	movs	r2, #5
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e16b      	b.n	80014c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	429a      	cmp	r2, r3
 8001202:	f040 815a 	bne.w	80014ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d005      	beq.n	800121e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121a:	2b02      	cmp	r3, #2
 800121c:	d130      	bne.n	8001280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 0201 	and.w	r2, r3, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b03      	cmp	r3, #3
 800128a:	d017      	beq.n	80012bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d123      	bne.n	8001310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	69b9      	ldr	r1, [r7, #24]
 800130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0203 	and.w	r2, r3, #3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 80b4 	beq.w	80014ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_GPIO_Init+0x30c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136e:	4a5b      	ldr	r2, [pc, #364]	; (80014dc <HAL_GPIO_Init+0x310>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_GPIO_Init+0x314>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d02b      	beq.n	80013f2 <HAL_GPIO_Init+0x226>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a51      	ldr	r2, [pc, #324]	; (80014e4 <HAL_GPIO_Init+0x318>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d025      	beq.n	80013ee <HAL_GPIO_Init+0x222>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_GPIO_Init+0x31c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x21e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <HAL_GPIO_Init+0x320>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x21a>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4e      	ldr	r2, [pc, #312]	; (80014f0 <HAL_GPIO_Init+0x324>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x216>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4d      	ldr	r2, [pc, #308]	; (80014f4 <HAL_GPIO_Init+0x328>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x212>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <HAL_GPIO_Init+0x32c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_GPIO_Init+0x330>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x20a>
 80013d2:	2307      	movs	r3, #7
 80013d4:	e00e      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013d6:	2308      	movs	r3, #8
 80013d8:	e00c      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00a      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013de:	2305      	movs	r3, #5
 80013e0:	e008      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013e2:	2304      	movs	r3, #4
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013e6:	2303      	movs	r3, #3
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x228>
 80013f2:	2300      	movs	r3, #0
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001404:	4935      	ldr	r1, [pc, #212]	; (80014dc <HAL_GPIO_Init+0x310>)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x334>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_GPIO_Init+0x334>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_GPIO_Init+0x334>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	f67f ae90 	bls.w	80011e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40013800 	.word	0x40013800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40021400 	.word	0x40021400
 80014f8:	40021800 	.word	0x40021800
 80014fc:	40021c00 	.word	0x40021c00
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e12b      	b.n	80017a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fab2 	bl	8000ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800159a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800159c:	f002 fc4c 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 80015a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a81      	ldr	r2, [pc, #516]	; (80017ac <HAL_I2C_Init+0x274>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d807      	bhi.n	80015bc <HAL_I2C_Init+0x84>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a80      	ldr	r2, [pc, #512]	; (80017b0 <HAL_I2C_Init+0x278>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e006      	b.n	80015ca <HAL_I2C_Init+0x92>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a7d      	ldr	r2, [pc, #500]	; (80017b4 <HAL_I2C_Init+0x27c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf94      	ite	ls
 80015c4:	2301      	movls	r3, #1
 80015c6:	2300      	movhi	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0e7      	b.n	80017a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a78      	ldr	r2, [pc, #480]	; (80017b8 <HAL_I2C_Init+0x280>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0c9b      	lsrs	r3, r3, #18
 80015dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <HAL_I2C_Init+0x274>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d802      	bhi.n	800160c <HAL_I2C_Init+0xd4>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3301      	adds	r3, #1
 800160a:	e009      	b.n	8001620 <HAL_I2C_Init+0xe8>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4a69      	ldr	r2, [pc, #420]	; (80017bc <HAL_I2C_Init+0x284>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	3301      	adds	r3, #1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	430b      	orrs	r3, r1
 8001626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	495c      	ldr	r1, [pc, #368]	; (80017ac <HAL_I2C_Init+0x274>)
 800163c:	428b      	cmp	r3, r1
 800163e:	d819      	bhi.n	8001674 <HAL_I2C_Init+0x13c>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e59      	subs	r1, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fbb1 f3f3 	udiv	r3, r1, r3
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001654:	400b      	ands	r3, r1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <HAL_I2C_Init+0x138>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e59      	subs	r1, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fbb1 f3f3 	udiv	r3, r1, r3
 8001668:	3301      	adds	r3, #1
 800166a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166e:	e051      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 8001670:	2304      	movs	r3, #4
 8001672:	e04f      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d111      	bne.n	80016a0 <HAL_I2C_Init+0x168>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	e012      	b.n	80016c6 <HAL_I2C_Init+0x18e>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	0099      	lsls	r1, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x196>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e022      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10e      	bne.n	80016f4 <HAL_I2C_Init+0x1bc>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e58      	subs	r0, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	460b      	mov	r3, r1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	440b      	add	r3, r1
 80016e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	e00f      	b.n	8001714 <HAL_I2C_Init+0x1dc>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1e58      	subs	r0, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6859      	ldr	r1, [r3, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	0099      	lsls	r1, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	6809      	ldr	r1, [r1, #0]
 8001718:	4313      	orrs	r3, r2
 800171a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6911      	ldr	r1, [r2, #16]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68d2      	ldr	r2, [r2, #12]
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	000186a0 	.word	0x000186a0
 80017b0:	001e847f 	.word	0x001e847f
 80017b4:	003d08ff 	.word	0x003d08ff
 80017b8:	431bde83 	.word	0x431bde83
 80017bc:	10624dd3 	.word	0x10624dd3

080017c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	461a      	mov	r2, r3
 80017cc:	460b      	mov	r3, r1
 80017ce:	817b      	strh	r3, [r7, #10]
 80017d0:	4613      	mov	r3, r2
 80017d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff fb48 	bl	8000e68 <HAL_GetTick>
 80017d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	f040 80e0 	bne.w	80019a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2319      	movs	r3, #25
 80017ee:	2201      	movs	r2, #1
 80017f0:	4970      	ldr	r1, [pc, #448]	; (80019b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f001 fcdc 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	e0d3      	b.n	80019aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_I2C_Master_Transmit+0x50>
 800180c:	2302      	movs	r3, #2
 800180e:	e0cc      	b.n	80019aa <HAL_I2C_Master_Transmit+0x1ea>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d007      	beq.n	8001836 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2221      	movs	r2, #33	; 0x21
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2210      	movs	r2, #16
 8001852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	893a      	ldrh	r2, [r7, #8]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001878:	8979      	ldrh	r1, [r7, #10]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f001 fb6c 	bl	8002f5c <I2C_MasterRequestWrite>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e08d      	b.n	80019aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018a4:	e066      	b.n	8001974 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	6a39      	ldr	r1, [r7, #32]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f001 fd56 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00d      	beq.n	80018d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d107      	bne.n	80018ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e06b      	b.n	80019aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b04      	cmp	r3, #4
 800190e:	d11b      	bne.n	8001948 <HAL_I2C_Master_Transmit+0x188>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	2b00      	cmp	r3, #0
 8001916:	d017      	beq.n	8001948 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	6a39      	ldr	r1, [r7, #32]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f001 fd46 	bl	80033de <I2C_WaitOnBTFFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2b04      	cmp	r3, #4
 800195e:	d107      	bne.n	8001970 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e01a      	b.n	80019aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d194      	bne.n	80018a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e000      	b.n	80019aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019a8:	2302      	movs	r3, #2
  }
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	00100002 	.word	0x00100002
 80019b8:	ffff0000 	.word	0xffff0000

080019bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d003      	beq.n	80019f4 <HAL_I2C_EV_IRQHandler+0x38>
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	f040 80c1 	bne.w	8001b76 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_I2C_EV_IRQHandler+0x6e>
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001a14:	d003      	beq.n	8001a1e <HAL_I2C_EV_IRQHandler+0x62>
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001a1c:	d101      	bne.n	8001a22 <HAL_I2C_EV_IRQHandler+0x66>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_I2C_EV_IRQHandler+0x68>
 8001a22:	2300      	movs	r3, #0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	f000 8132 	beq.w	8001c8e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_I2C_EV_IRQHandler+0x92>
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	0a5b      	lsrs	r3, r3, #9
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f001 fd6e 	bl	8003522 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fcdc 	bl	8002404 <I2C_Master_SB>
 8001a4c:	e092      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_I2C_EV_IRQHandler+0xb2>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	0a5b      	lsrs	r3, r3, #9
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fd52 	bl	8002510 <I2C_Master_ADD10>
 8001a6c:	e082      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0xd2>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	0a5b      	lsrs	r3, r3, #9
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fd6c 	bl	8002564 <I2C_Master_ADDR>
 8001a8c:	e072      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03b      	beq.n	8001b12 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa8:	f000 80f3 	beq.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	09db      	lsrs	r3, r3, #7
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00f      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f94c 	bl	8001d6e <I2C_MasterTransmit_TXE>
 8001ad6:	e04d      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80d6 	beq.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	0a5b      	lsrs	r3, r3, #9
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80cf 	beq.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	2b21      	cmp	r3, #33	; 0x21
 8001af8:	d103      	bne.n	8001b02 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f9d3 	bl	8001ea6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b00:	e0c7      	b.n	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	2b40      	cmp	r3, #64	; 0x40
 8001b06:	f040 80c4 	bne.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fa41 	bl	8001f92 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b10:	e0bf      	b.n	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b20:	f000 80b7 	beq.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00f      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0x194>
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	0a9b      	lsrs	r3, r3, #10
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_I2C_EV_IRQHandler+0x194>
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fab6 	bl	80020ba <I2C_MasterReceive_RXNE>
 8001b4e:	e011      	b.n	8001b74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 809a 	beq.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	0a5b      	lsrs	r3, r3, #9
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8093 	beq.w	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fb5f 	bl	8002230 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b72:	e08e      	b.n	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b74:	e08d      	b.n	8001c92 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	e007      	b.n	8001b98 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d012      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x20e>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00c      	beq.n	8001bca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001bc0:	69b9      	ldr	r1, [r7, #24]
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 ff1d 	bl	8002a02 <I2C_Slave_ADDR>
 8001bc8:	e066      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_I2C_EV_IRQHandler+0x22e>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	0a5b      	lsrs	r3, r3, #9
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 ff58 	bl	8002a98 <I2C_Slave_STOPF>
 8001be8:	e056      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	2b21      	cmp	r3, #33	; 0x21
 8001bee:	d002      	beq.n	8001bf6 <HAL_I2C_EV_IRQHandler+0x23a>
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	2b29      	cmp	r3, #41	; 0x29
 8001bf4:	d125      	bne.n	8001c42 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	09db      	lsrs	r3, r3, #7
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00f      	beq.n	8001c22 <HAL_I2C_EV_IRQHandler+0x266>
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	0a9b      	lsrs	r3, r3, #10
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_I2C_EV_IRQHandler+0x266>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fe33 	bl	8002886 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c20:	e039      	b.n	8001c96 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d033      	beq.n	8001c96 <HAL_I2C_EV_IRQHandler+0x2da>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	0a5b      	lsrs	r3, r3, #9
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d02d      	beq.n	8001c96 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fe60 	bl	8002900 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c40:	e029      	b.n	8001c96 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00f      	beq.n	8001c6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	0a9b      	lsrs	r3, r3, #10
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fe6b 	bl	8002942 <I2C_SlaveReceive_RXNE>
 8001c6c:	e014      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00e      	beq.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	0a5b      	lsrs	r3, r3, #9
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fe99 	bl	80029be <I2C_SlaveReceive_BTF>
 8001c8c:	e004      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001c8e:	bf00      	nop
 8001c90:	e002      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d84:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d150      	bne.n	8001e36 <I2C_MasterTransmit_TXE+0xc8>
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b21      	cmp	r3, #33	; 0x21
 8001d98:	d14d      	bne.n	8001e36 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d01d      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0x6e>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d01a      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0x6e>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dac:	d016      	beq.n	8001ddc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dbc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2211      	movs	r2, #17
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff62 	bl	8001c9e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dda:	e060      	b.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d107      	bne.n	8001e26 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff7d 	bl	8001d1e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e24:	e03b      	b.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff35 	bl	8001c9e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e34:	e033      	b.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b21      	cmp	r3, #33	; 0x21
 8001e3a:	d005      	beq.n	8001e48 <I2C_MasterTransmit_TXE+0xda>
 8001e3c:	7bbb      	ldrb	r3, [r7, #14]
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d12d      	bne.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b22      	cmp	r3, #34	; 0x22
 8001e46:	d12a      	bne.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e62:	e01c      	b.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d103      	bne.n	8001e78 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f88e 	bl	8001f92 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e76:	e012      	b.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e9c:	e7ff      	b.n	8001e9e <I2C_MasterTransmit_TXE+0x130>
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b21      	cmp	r3, #33	; 0x21
 8001ebe:	d164      	bne.n	8001f8a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001eee:	e04c      	b.n	8001f8a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d01d      	beq.n	8001f32 <I2C_MasterTransmit_BTF+0x8c>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d01a      	beq.n	8001f32 <I2C_MasterTransmit_BTF+0x8c>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f02:	d016      	beq.n	8001f32 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f12:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2211      	movs	r2, #17
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff feb7 	bl	8001c9e <HAL_I2C_MasterTxCpltCallback>
}
 8001f30:	e02b      	b.n	8001f8a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f40:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f50:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d107      	bne.n	8001f7c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fed2 	bl	8001d1e <HAL_I2C_MemTxCpltCallback>
}
 8001f7a:	e006      	b.n	8001f8a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fe8a 	bl	8001c9e <HAL_I2C_MasterTxCpltCallback>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11d      	bne.n	8001fe6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10b      	bne.n	8001fca <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc2:	1c9a      	adds	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001fc8:	e073      	b.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	121b      	asrs	r3, r3, #8
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fe4:	e065      	b.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10b      	bne.n	8002006 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002004:	e055      	b.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	2b02      	cmp	r3, #2
 800200c:	d151      	bne.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b22      	cmp	r3, #34	; 0x22
 8002012:	d10d      	bne.n	8002030 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002022:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800202e:	e040      	b.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b21      	cmp	r3, #33	; 0x21
 800203e:	d112      	bne.n	8002066 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002064:	e025      	b.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d120      	bne.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b21      	cmp	r3, #33	; 0x21
 8002074:	d11d      	bne.n	80020b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002084:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002094:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fe36 	bl	8001d1e <HAL_I2C_MemTxCpltCallback>
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b22      	cmp	r3, #34	; 0x22
 80020cc:	f040 80ac 	bne.w	8002228 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d921      	bls.n	8002122 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b03      	cmp	r3, #3
 800210c:	f040 808c 	bne.w	8002228 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002120:	e082      	b.n	8002228 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	2b02      	cmp	r3, #2
 8002128:	d075      	beq.n	8002216 <I2C_MasterReceive_RXNE+0x15c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d002      	beq.n	8002136 <I2C_MasterReceive_RXNE+0x7c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d16f      	bne.n	8002216 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f001 f992 	bl	8003460 <I2C_WaitOnSTOPRequestThroughIT>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d142      	bne.n	80021c8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002160:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d10a      	bne.n	80021b2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fdc1 	bl	8001d32 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021b0:	e03a      	b.n	8002228 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2212      	movs	r2, #18
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff fd76 	bl	8001cb2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021c6:	e02f      	b.n	8002228 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fd99 	bl	8001d46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002214:	e008      	b.n	8002228 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002224:	605a      	str	r2, [r3, #4]
}
 8002226:	e7ff      	b.n	8002228 <I2C_MasterReceive_RXNE+0x16e>
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b04      	cmp	r3, #4
 8002246:	d11b      	bne.n	8002280 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800227e:	e0bd      	b.n	80023fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b03      	cmp	r3, #3
 8002288:	d129      	bne.n	80022de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002298:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00a      	beq.n	80022b6 <I2C_MasterReceive_BTF+0x86>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d007      	beq.n	80022b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022dc:	e08e      	b.n	80023fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d176      	bne.n	80023d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d002      	beq.n	80022f4 <I2C_MasterReceive_BTF+0xc4>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d108      	bne.n	8002306 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e019      	b.n	800233a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d002      	beq.n	8002312 <I2C_MasterReceive_BTF+0xe2>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d108      	bne.n	8002324 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e00a      	b.n	800233a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b10      	cmp	r3, #16
 8002328:	d007      	beq.n	800233a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002338:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002394:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d10a      	bne.n	80023c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fcba 	bl	8001d32 <HAL_I2C_MemRxCpltCallback>
}
 80023be:	e01d      	b.n	80023fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2212      	movs	r2, #18
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fc6f 	bl	8001cb2 <HAL_I2C_MasterRxCpltCallback>
}
 80023d4:	e012      	b.n	80023fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d117      	bne.n	8002448 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002430:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002432:	e067      	b.n	8002504 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	b2da      	uxtb	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	611a      	str	r2, [r3, #16]
}
 8002446:	e05d      	b.n	8002504 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002450:	d133      	bne.n	80024ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b21      	cmp	r3, #33	; 0x21
 800245c:	d109      	bne.n	8002472 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	e008      	b.n	8002484 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <I2C_Master_SB+0x92>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	2b00      	cmp	r3, #0
 800249c:	d032      	beq.n	8002504 <I2C_Master_SB+0x100>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02d      	beq.n	8002504 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024b6:	605a      	str	r2, [r3, #4]
}
 80024b8:	e024      	b.n	8002504 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10e      	bne.n	80024e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	11db      	asrs	r3, r3, #7
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 0306 	and.w	r3, r3, #6
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f063 030f 	orn	r3, r3, #15
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	611a      	str	r2, [r3, #16]
}
 80024de:	e011      	b.n	8002504 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10d      	bne.n	8002504 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	11db      	asrs	r3, r3, #7
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0306 	and.w	r3, r3, #6
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f063 030e 	orn	r3, r3, #14
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <I2C_Master_ADD10+0x26>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <I2C_Master_ADD10+0x48>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002556:	605a      	str	r2, [r3, #4]
  }
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002564:	b480      	push	{r7}
 8002566:	b091      	sub	sp, #68	; 0x44
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b22      	cmp	r3, #34	; 0x22
 800258c:	f040 8169 	bne.w	8002862 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <I2C_Master_ADDR+0x54>
 8002598:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d10b      	bne.n	80025b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a0:	2300      	movs	r3, #0
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	e160      	b.n	800287a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11d      	bne.n	80025fc <I2C_Master_ADDR+0x98>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025c8:	d118      	bne.n	80025fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	651a      	str	r2, [r3, #80]	; 0x50
 80025fa:	e13e      	b.n	800287a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e115      	b.n	800285a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 808a 	bne.w	800274e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002640:	d137      	bne.n	80026b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002660:	d113      	bne.n	800268a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	e0e7      	b.n	800285a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e0d3      	b.n	800285a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d02e      	beq.n	8002716 <I2C_Master_ADDR+0x1b2>
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d02b      	beq.n	8002716 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	2b12      	cmp	r3, #18
 80026c2:	d102      	bne.n	80026ca <I2C_Master_ADDR+0x166>
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d125      	bne.n	8002716 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d00e      	beq.n	80026ee <I2C_Master_ADDR+0x18a>
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d00b      	beq.n	80026ee <I2C_Master_ADDR+0x18a>
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d008      	beq.n	80026ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	e0a1      	b.n	800285a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e085      	b.n	800285a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d14d      	bne.n	80027f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	2b04      	cmp	r3, #4
 800275c:	d016      	beq.n	800278c <I2C_Master_ADDR+0x228>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	2b02      	cmp	r3, #2
 8002762:	d013      	beq.n	800278c <I2C_Master_ADDR+0x228>
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	2b10      	cmp	r3, #16
 8002768:	d010      	beq.n	800278c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e007      	b.n	800279c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027aa:	d117      	bne.n	80027dc <I2C_Master_ADDR+0x278>
 80027ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b2:	d00b      	beq.n	80027cc <I2C_Master_ADDR+0x268>
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d008      	beq.n	80027cc <I2C_Master_ADDR+0x268>
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d005      	beq.n	80027cc <I2C_Master_ADDR+0x268>
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d002      	beq.n	80027cc <I2C_Master_ADDR+0x268>
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d107      	bne.n	80027dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	e032      	b.n	800285a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002802:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002812:	d117      	bne.n	8002844 <I2C_Master_ADDR+0x2e0>
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800281a:	d00b      	beq.n	8002834 <I2C_Master_ADDR+0x2d0>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	2b01      	cmp	r3, #1
 8002820:	d008      	beq.n	8002834 <I2C_Master_ADDR+0x2d0>
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	2b08      	cmp	r3, #8
 8002826:	d005      	beq.n	8002834 <I2C_Master_ADDR+0x2d0>
 8002828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282a:	2b10      	cmp	r3, #16
 800282c:	d002      	beq.n	8002834 <I2C_Master_ADDR+0x2d0>
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	2b20      	cmp	r3, #32
 8002832:	d107      	bne.n	8002844 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002842:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002860:	e00b      	b.n	800287a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	e7ff      	b.n	800287a <I2C_Master_ADDR+0x316>
 800287a:	bf00      	nop
 800287c:	3744      	adds	r7, #68	; 0x44
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02b      	beq.n	80028f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d114      	bne.n	80028f8 <I2C_SlaveTransmit_TXE+0x72>
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b29      	cmp	r3, #41	; 0x29
 80028d2:	d111      	bne.n	80028f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2221      	movs	r2, #33	; 0x21
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2228      	movs	r2, #40	; 0x28
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff f9e7 	bl	8001cc6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d011      	beq.n	8002936 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02c      	beq.n	80029b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d114      	bne.n	80029b6 <I2C_SlaveReceive_RXNE+0x74>
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b2a      	cmp	r3, #42	; 0x2a
 8002990:	d111      	bne.n	80029b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2222      	movs	r2, #34	; 0x22
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2228      	movs	r2, #40	; 0x28
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff f992 	bl	8001cda <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a1c:	2b28      	cmp	r3, #40	; 0x28
 8002a1e:	d127      	bne.n	8002a70 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	09db      	lsrs	r3, r3, #7
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	81bb      	strh	r3, [r7, #12]
 8002a52:	e002      	b.n	8002a5a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a62:	89ba      	ldrh	r2, [r7, #12]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff f940 	bl	8001cee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a6e:	e00e      	b.n	8002a8e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af4:	d172      	bne.n	8002bdc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b22      	cmp	r3, #34	; 0x22
 8002afa:	d002      	beq.n	8002b02 <I2C_Slave_STOPF+0x6a>
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b2a      	cmp	r3, #42	; 0x2a
 8002b00:	d135      	bne.n	8002b6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0204 	orr.w	r2, r3, #4
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fb38 	bl	80011b0 <HAL_DMA_GetState>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d049      	beq.n	8002bda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4a69      	ldr	r2, [pc, #420]	; (8002cf0 <I2C_Slave_STOPF+0x258>)
 8002b4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fb0a 	bl	800116c <HAL_DMA_Abort_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03d      	beq.n	8002bda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b6c:	e035      	b.n	8002bda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fb02 	bl	80011b0 <HAL_DMA_GetState>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d014      	beq.n	8002bdc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	4a4e      	ldr	r2, [pc, #312]	; (8002cf0 <I2C_Slave_STOPF+0x258>)
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fad4 	bl	800116c <HAL_DMA_Abort_IT>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4798      	blx	r3
 8002bd8:	e000      	b.n	8002bdc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03e      	beq.n	8002c64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d112      	bne.n	8002c1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d112      	bne.n	8002c4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0204 	orr.w	r2, r3, #4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f843 	bl	8002cf8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c72:	e039      	b.n	8002ce8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b2a      	cmp	r3, #42	; 0x2a
 8002c78:	d109      	bne.n	8002c8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2228      	movs	r2, #40	; 0x28
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff f826 	bl	8001cda <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b28      	cmp	r3, #40	; 0x28
 8002c98:	d111      	bne.n	8002cbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <I2C_Slave_STOPF+0x25c>)
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff f827 	bl	8001d0a <HAL_I2C_ListenCpltCallback>
}
 8002cbc:	e014      	b.n	8002ce8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	2b22      	cmp	r3, #34	; 0x22
 8002cc4:	d002      	beq.n	8002ccc <I2C_Slave_STOPF+0x234>
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b22      	cmp	r3, #34	; 0x22
 8002cca:	d10d      	bne.n	8002ce8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe fff9 	bl	8001cda <HAL_I2C_SlaveRxCpltCallback>
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	08003061 	.word	0x08003061
 8002cf4:	ffff0000 	.word	0xffff0000

08002cf8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d10:	7bbb      	ldrb	r3, [r7, #14]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d002      	beq.n	8002d1c <I2C_ITError+0x24>
 8002d16:	7bbb      	ldrb	r3, [r7, #14]
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d10a      	bne.n	8002d32 <I2C_ITError+0x3a>
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b22      	cmp	r3, #34	; 0x22
 8002d20:	d107      	bne.n	8002d32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d38:	2b28      	cmp	r3, #40	; 0x28
 8002d3a:	d107      	bne.n	8002d4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2228      	movs	r2, #40	; 0x28
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d4a:	e015      	b.n	8002d78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5a:	d00a      	beq.n	8002d72 <I2C_ITError+0x7a>
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b60      	cmp	r3, #96	; 0x60
 8002d60:	d007      	beq.n	8002d72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d86:	d162      	bne.n	8002e4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d020      	beq.n	8002de8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	4a6a      	ldr	r2, [pc, #424]	; (8002f54 <I2C_ITError+0x25c>)
 8002dac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f9da 	bl	800116c <HAL_DMA_Abort_IT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8089 	beq.w	8002ed2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de2:	4610      	mov	r0, r2
 8002de4:	4798      	blx	r3
 8002de6:	e074      	b.n	8002ed2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	4a59      	ldr	r2, [pc, #356]	; (8002f54 <I2C_ITError+0x25c>)
 8002dee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe f9b9 	bl	800116c <HAL_DMA_Abort_IT>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d068      	beq.n	8002ed2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d10b      	bne.n	8002e26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4798      	blx	r3
 8002e4c:	e041      	b.n	8002ed2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b60      	cmp	r3, #96	; 0x60
 8002e58:	d125      	bne.n	8002ea6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d10b      	bne.n	8002e8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe ff5b 	bl	8001d5a <HAL_I2C_AbortCpltCallback>
 8002ea4:	e015      	b.n	8002ed2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d10b      	bne.n	8002ecc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fe ff3a 	bl	8001d46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10e      	bne.n	8002f00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d113      	bne.n	8002f4c <I2C_ITError+0x254>
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b28      	cmp	r3, #40	; 0x28
 8002f28:	d110      	bne.n	8002f4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <I2C_ITError+0x260>)
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fedf 	bl	8001d0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	08003061 	.word	0x08003061
 8002f58:	ffff0000 	.word	0xffff0000

08002f5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d006      	beq.n	8002f86 <I2C_MasterRequestWrite+0x2a>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d003      	beq.n	8002f86 <I2C_MasterRequestWrite+0x2a>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f84:	d108      	bne.n	8002f98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e00b      	b.n	8002fb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	2b12      	cmp	r3, #18
 8002f9e:	d107      	bne.n	8002fb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f8f7 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd6:	d103      	bne.n	8002fe0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e035      	b.n	8003050 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fec:	d108      	bne.n	8003000 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ffc:	611a      	str	r2, [r3, #16]
 8002ffe:	e01b      	b.n	8003038 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003000:	897b      	ldrh	r3, [r7, #10]
 8003002:	11db      	asrs	r3, r3, #7
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f063 030f 	orn	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <I2C_MasterRequestWrite+0xfc>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f91d 	bl	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e010      	b.n	8003050 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4907      	ldr	r1, [pc, #28]	; (800305c <I2C_MasterRequestWrite+0x100>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f90d 	bl	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	00010008 	.word	0x00010008
 800305c:	00010002 	.word	0x00010002

08003060 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800307a:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <I2C_DMAAbort+0x148>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	4a4a      	ldr	r2, [pc, #296]	; (80031ac <I2C_DMAAbort+0x14c>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0a1a      	lsrs	r2, r3, #8
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00da      	lsls	r2, r3, #3
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80030a6:	e00a      	b.n	80030be <I2C_DMAAbort+0x5e>
    }
    count--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d0ea      	beq.n	8003094 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	2200      	movs	r2, #0
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	2200      	movs	r2, #0
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	2200      	movs	r2, #0
 8003102:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	2200      	movs	r2, #0
 8003112:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d10e      	bne.n	800314e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7fe fe07 	bl	8001d5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800314c:	e027      	b.n	800319e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003154:	2b28      	cmp	r3, #40	; 0x28
 8003156:	d117      	bne.n	8003188 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003176:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2228      	movs	r2, #40	; 0x28
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003186:	e007      	b.n	8003198 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7fe fdd4 	bl	8001d46 <HAL_I2C_ErrorCallback>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000
 80031ac:	14f8b589 	.word	0x14f8b589

080031b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c0:	e025      	b.n	800320e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d021      	beq.n	800320e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fd fe4d 	bl	8000e68 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e023      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10d      	bne.n	8003234 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	e00c      	b.n	800324e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4013      	ands	r3, r2
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf0c      	ite	eq
 8003246:	2301      	moveq	r3, #1
 8003248:	2300      	movne	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	429a      	cmp	r2, r3
 8003252:	d0b6      	beq.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800326c:	e051      	b.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d123      	bne.n	80032c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003296:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f043 0204 	orr.w	r2, r3, #4
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e046      	b.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d021      	beq.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fd fdcb 	bl	8000e68 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e020      	b.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10c      	bne.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	43da      	mvns	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4013      	ands	r3, r2
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e00b      	b.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	43da      	mvns	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d18d      	bne.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003368:	e02d      	b.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8aa 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e02d      	b.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d021      	beq.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fd fd71 	bl	8000e68 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d116      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e007      	b.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d1ca      	bne.n	800336a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ea:	e02d      	b.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f869 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e02d      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d021      	beq.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fd fd30 	bl	8000e68 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d116      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d1ca      	bne.n	80033ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	08db      	lsrs	r3, r3, #3
 8003472:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	0a1a      	lsrs	r2, r3, #8
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3b01      	subs	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e008      	b.n	80034b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ac:	d0e9      	beq.n	8003482 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000000 	.word	0x20000000
 80034c0:	14f8b589 	.word	0x14f8b589

080034c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d11b      	bne.n	8003514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003532:	d103      	bne.n	800353c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800353a:	e007      	b.n	800354c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003544:	d102      	bne.n	800354c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2208      	movs	r2, #8
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e267      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d075      	beq.n	8003662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b04      	cmp	r3, #4
 8003580:	d00c      	beq.n	800359c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b85      	ldr	r3, [pc, #532]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358a:	2b08      	cmp	r3, #8
 800358c:	d112      	bne.n	80035b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358e:	4b82      	ldr	r3, [pc, #520]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359a:	d10b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	4b7e      	ldr	r3, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05b      	beq.n	8003660 <HAL_RCC_OscConfig+0x108>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d157      	bne.n	8003660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e242      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_OscConfig+0x74>
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a75      	ldr	r2, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e01d      	b.n	8003608 <HAL_RCC_OscConfig+0xb0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x98>
 80035d6:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6f      	ldr	r2, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b6d      	ldr	r3, [pc, #436]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6c      	ldr	r2, [pc, #432]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0xb0>
 80035f0:	4b69      	ldr	r3, [pc, #420]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a68      	ldr	r2, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a65      	ldr	r2, [pc, #404]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fd fc2a 	bl	8000e68 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003618:	f7fd fc26 	bl	8000e68 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e207      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0xc0>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fc16 	bl	8000e68 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7fd fc12 	bl	8000e68 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1f3      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003652:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0xe8>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003682:	2b08      	cmp	r3, #8
 8003684:	d11c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003686:	4b44      	ldr	r3, [pc, #272]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	4b41      	ldr	r3, [pc, #260]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x152>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1c7      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4937      	ldr	r1, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	e03a      	b.n	8003736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_OscConfig+0x244>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd fbcb 	bl	8000e68 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fd fbc7 	bl	8000e68 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e1a8      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4925      	ldr	r1, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x244>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd fbaa 	bl	8000e68 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003718:	f7fd fba6 	bl	8000e68 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e187      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d036      	beq.n	80037b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_RCC_OscConfig+0x248>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fb8a 	bl	8000e68 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fd fb86 	bl	8000e68 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e167      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_OscConfig+0x240>)
 800376c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x200>
 8003776:	e01b      	b.n	80037b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_OscConfig+0x248>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fd fb73 	bl	8000e68 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	e00e      	b.n	80037a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003786:	f7fd fb6f 	bl	8000e68 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d907      	bls.n	80037a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e150      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
 8003798:	40023800 	.word	0x40023800
 800379c:	42470000 	.word	0x42470000
 80037a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ea      	bne.n	8003786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8097 	beq.w	80038ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037be:	2300      	movs	r3, #0
 80037c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c2:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	4b7d      	ldr	r3, [pc, #500]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	4a7c      	ldr	r2, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	; 0x40
 80037de:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b77      	ldr	r3, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x474>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b74      	ldr	r3, [pc, #464]	; (80039cc <HAL_RCC_OscConfig+0x474>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a73      	ldr	r2, [pc, #460]	; (80039cc <HAL_RCC_OscConfig+0x474>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fd fb2f 	bl	8000e68 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd fb2b 	bl	8000e68 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e10c      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <HAL_RCC_OscConfig+0x474>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x2ea>
 8003834:	4b64      	ldr	r3, [pc, #400]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a63      	ldr	r2, [pc, #396]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	e01c      	b.n	800387c <HAL_RCC_OscConfig+0x324>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b05      	cmp	r3, #5
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x30c>
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a5e      	ldr	r2, [pc, #376]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6713      	str	r3, [r2, #112]	; 0x70
 8003856:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a5b      	ldr	r2, [pc, #364]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x324>
 8003864:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a57      	ldr	r2, [pc, #348]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	4a54      	ldr	r2, [pc, #336]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003876:	f023 0304 	bic.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d015      	beq.n	80038b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fd faf0 	bl	8000e68 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fd faec 	bl	8000e68 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0cb      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RCC_OscConfig+0x334>
 80038ae:	e014      	b.n	80038da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7fd fada 	bl	8000e68 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fd fad6 	bl	8000e68 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0b5      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1ee      	bne.n	80038b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 80a1 	beq.w	8003a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d05c      	beq.n	80039bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d141      	bne.n	800398e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCC_OscConfig+0x478>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fd faaa 	bl	8000e68 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd faa6 	bl	8000e68 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e087      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	085b      	lsrs	r3, r3, #1
 800394e:	3b01      	subs	r3, #1
 8003950:	041b      	lsls	r3, r3, #16
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	491b      	ldr	r1, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x478>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7fd fa7f 	bl	8000e68 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396e:	f7fd fa7b 	bl	8000e68 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e05c      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x416>
 800398c:	e054      	b.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <HAL_RCC_OscConfig+0x478>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fd fa68 	bl	8000e68 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd fa64 	bl	8000e68 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e045      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_RCC_OscConfig+0x470>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x444>
 80039ba:	e03d      	b.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e038      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40007000 	.word	0x40007000
 80039d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x4ec>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d028      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d121      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d11a      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0cc      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b68      	ldr	r3, [pc, #416]	; (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d90c      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0b8      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a9c:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a52      	ldr	r2, [pc, #328]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	494d      	ldr	r1, [pc, #308]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d044      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae6:	4b47      	ldr	r3, [pc, #284]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d119      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e07f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b06:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b16:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e067      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4934      	ldr	r1, [pc, #208]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b38:	f7fd f996 	bl	8000e68 <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b40:	f7fd f992 	bl	8000e68 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e04f      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 020c 	and.w	r2, r3, #12
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d1eb      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d20c      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e032      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4916      	ldr	r1, [pc, #88]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	490e      	ldr	r1, [pc, #56]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bce:	f000 f821 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	490a      	ldr	r1, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	5ccb      	ldrb	r3, [r1, r3]
 8003be2:	fa22 f303 	lsr.w	r3, r2, r3
 8003be6:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f80a 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023c00 	.word	0x40023c00
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08005520 	.word	0x08005520
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000004 	.word	0x20000004

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c18:	b094      	sub	sp, #80	; 0x50
 8003c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c20:	2300      	movs	r3, #0
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c24:	2300      	movs	r3, #0
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c2c:	4b79      	ldr	r3, [pc, #484]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d00d      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x40>
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	f200 80e1 	bhi.w	8003e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x34>
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c46:	e0db      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c48:	4b73      	ldr	r3, [pc, #460]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c4c:	e0db      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c4e:	4b73      	ldr	r3, [pc, #460]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c52:	e0d8      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c54:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c5e:	4b6d      	ldr	r3, [pc, #436]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6a:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	099b      	lsrs	r3, r3, #6
 8003c70:	2200      	movs	r2, #0
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7e:	2300      	movs	r3, #0
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
 8003c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	f04f 0000 	mov.w	r0, #0
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	0159      	lsls	r1, r3, #5
 8003c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c98:	0150      	lsls	r0, r2, #5
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	1a51      	subs	r1, r2, r1
 8003ca2:	6139      	str	r1, [r7, #16]
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb8:	4659      	mov	r1, fp
 8003cba:	018b      	lsls	r3, r1, #6
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	018a      	lsls	r2, r1, #6
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ccc:	4659      	mov	r1, fp
 8003cce:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce6:	4690      	mov	r8, r2
 8003ce8:	4699      	mov	r9, r3
 8003cea:	4623      	mov	r3, r4
 8003cec:	eb18 0303 	adds.w	r3, r8, r3
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	eb49 0303 	adc.w	r3, r9, r3
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d06:	4629      	mov	r1, r5
 8003d08:	024b      	lsls	r3, r1, #9
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d10:	4621      	mov	r1, r4
 8003d12:	024a      	lsls	r2, r1, #9
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d24:	f7fc fa50 	bl	80001c8 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d30:	e058      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d32:	4b38      	ldr	r3, [pc, #224]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d42:	623b      	str	r3, [r7, #32]
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
 8003d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	f04f 0000 	mov.w	r0, #0
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	0159      	lsls	r1, r3, #5
 8003d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5e:	0150      	lsls	r0, r2, #5
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4641      	mov	r1, r8
 8003d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d84:	ebb2 040a 	subs.w	r4, r2, sl
 8003d88:	eb63 050b 	sbc.w	r5, r3, fp
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	464b      	mov	r3, r9
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	028b      	lsls	r3, r1, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	028a      	lsls	r2, r1, #10
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	61fa      	str	r2, [r7, #28]
 8003dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd8:	f7fc f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4613      	mov	r3, r2
 8003de2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3750      	adds	r7, #80	; 0x50
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	007a1200 	.word	0x007a1200

08003e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000000 	.word	0x20000000

08003e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e3c:	f7ff fff0 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0a9b      	lsrs	r3, r3, #10
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08005530 	.word	0x08005530

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e64:	f7ff ffdc 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0b5b      	lsrs	r3, r3, #13
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	08005530 	.word	0x08005530

08003e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	220f      	movs	r2, #15
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	08db      	lsrs	r3, r3, #3
 8003ec2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <HAL_RCC_GetClockConfig+0x60>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0207 	and.w	r2, r3, #7
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40023c00 	.word	0x40023c00

08003eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e041      	b.n	8003f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f839 	bl	8003f8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 f9d8 	bl	80042e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e04e      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d01d      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_TIM_Base_Start_IT+0xd4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <HAL_TIM_Base_Start_IT+0xd8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_TIM_Base_Start_IT+0xdc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d111      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b06      	cmp	r3, #6
 8004030:	d010      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	e007      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40010400 	.word	0x40010400
 8004078:	40014000 	.word	0x40014000
 800407c:	40001800 	.word	0x40001800

08004080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0202 	mvn.w	r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8ee 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f8e0 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8f1 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0204 	mvn.w	r2, #4
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8c4 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8b6 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f8c7 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f89a 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f88c 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f89d 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f870 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f862 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f873 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fc22 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f902 	bl	8004434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f838 	bl	80042cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0220 	mvn.w	r2, #32
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8cc 	bl	8004420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a40      	ldr	r2, [pc, #256]	; (80043f4 <TIM_Base_SetConfig+0x114>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d00f      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <TIM_Base_SetConfig+0x118>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3c      	ldr	r2, [pc, #240]	; (80043fc <TIM_Base_SetConfig+0x11c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3b      	ldr	r2, [pc, #236]	; (8004400 <TIM_Base_SetConfig+0x120>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3a      	ldr	r2, [pc, #232]	; (8004404 <TIM_Base_SetConfig+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <TIM_Base_SetConfig+0x114>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02b      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d027      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <TIM_Base_SetConfig+0x118>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d023      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2b      	ldr	r2, [pc, #172]	; (80043fc <TIM_Base_SetConfig+0x11c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01f      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <TIM_Base_SetConfig+0x120>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01b      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <TIM_Base_SetConfig+0x124>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d017      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <TIM_Base_SetConfig+0x128>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <TIM_Base_SetConfig+0x12c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00f      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <TIM_Base_SetConfig+0x130>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a25      	ldr	r2, [pc, #148]	; (8004414 <TIM_Base_SetConfig+0x134>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a24      	ldr	r2, [pc, #144]	; (8004418 <TIM_Base_SetConfig+0x138>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <TIM_Base_SetConfig+0x13c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d108      	bne.n	80043a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <TIM_Base_SetConfig+0x114>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_Base_SetConfig+0xf8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <TIM_Base_SetConfig+0x124>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40010400 	.word	0x40010400
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800
 8004414:	40001800 	.word	0x40001800
 8004418:	40001c00 	.word	0x40001c00
 800441c:	40002000 	.word	0x40002000

08004420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03f      	b.n	80044da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fb7a 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fd8b 	bl	8004fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08a      	sub	sp, #40	; 0x28
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b20      	cmp	r3, #32
 8004500:	f040 808c 	bne.w	800461c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_UART_Receive+0x2e>
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e084      	b.n	800461e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_UART_Receive+0x40>
 800451e:	2302      	movs	r3, #2
 8004520:	e07d      	b.n	800461e <HAL_UART_Receive+0x13c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2222      	movs	r2, #34	; 0x22
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800453e:	f7fc fc93 	bl	8000e68 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d108      	bne.n	800456c <HAL_UART_Receive+0x8a>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e003      	b.n	8004574 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800457c:	e043      	b.n	8004606 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2120      	movs	r1, #32
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fb05 	bl	8004b98 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e042      	b.n	800461e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	3302      	adds	r3, #2
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e01f      	b.n	80045f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d007      	beq.n	80045d2 <HAL_UART_Receive+0xf0>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_UART_Receive+0xfe>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e008      	b.n	80045f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1b6      	bne.n	800457e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b0ba      	sub	sp, #232	; 0xe8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_UART_IRQHandler+0x66>
 800467a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fbd3 	bl	8004e32 <UART_Receive_IT>
      return;
 800468c:	e256      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800468e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80de 	beq.w	8004854 <HAL_UART_IRQHandler+0x22c>
 8004698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80d1 	beq.w	8004854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_UART_IRQHandler+0xae>
 80046be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_UART_IRQHandler+0xd2>
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0202 	orr.w	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_UART_IRQHandler+0xf6>
 8004706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <HAL_UART_IRQHandler+0x126>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0208 	orr.w	r2, r3, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 81ed 	beq.w	8004b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_UART_IRQHandler+0x14e>
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb5e 	bl	8004e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <HAL_UART_IRQHandler+0x17a>
 800479a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d04f      	beq.n	8004842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa66 	bl	8004c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d141      	bne.n	800483a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1d9      	bne.n	80047b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	2b00      	cmp	r3, #0
 8004808:	d013      	beq.n	8004832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	4a7d      	ldr	r2, [pc, #500]	; (8004a04 <HAL_UART_IRQHandler+0x3dc>)
 8004810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	4618      	mov	r0, r3
 8004818:	f7fc fca8 	bl	800116c <HAL_DMA_Abort_IT>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800482c:	4610      	mov	r0, r2
 800482e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e00e      	b.n	8004850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f99a 	bl	8004b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	e00a      	b.n	8004850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f996 	bl	8004b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e006      	b.n	8004850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f992 	bl	8004b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800484e:	e170      	b.n	8004b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	bf00      	nop
    return;
 8004852:	e16e      	b.n	8004b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	2b01      	cmp	r3, #1
 800485a:	f040 814a 	bne.w	8004af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8143 	beq.w	8004af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 813c 	beq.w	8004af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	f040 80b4 	bne.w	8004a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8140 	beq.w	8004b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048be:	429a      	cmp	r2, r3
 80048c0:	f080 8139 	bcs.w	8004b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	f000 8088 	beq.w	80049ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800491e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1d9      	bne.n	80048da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800494a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800494e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800495c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e1      	bne.n	8004926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800498c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e3      	bne.n	8004962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e3      	bne.n	80049a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc fb51 	bl	800108c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8c0 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a00:	e099      	b.n	8004b36 <HAL_UART_IRQHandler+0x50e>
 8004a02:	bf00      	nop
 8004a04:	08004d3b 	.word	0x08004d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 808b 	beq.w	8004b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8086 	beq.w	8004b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a52:	647a      	str	r2, [r7, #68]	; 0x44
 8004a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e3      	bne.n	8004a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	623b      	str	r3, [r7, #32]
   return(result);
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e3      	bne.n	8004a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0310 	bic.w	r3, r3, #16
 8004ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ad0:	61fa      	str	r2, [r7, #28]
 8004ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e3      	bne.n	8004aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f848 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004af0:	e023      	b.n	8004b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_UART_IRQHandler+0x4ea>
 8004afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f929 	bl	8004d62 <UART_Transmit_IT>
    return;
 8004b10:	e014      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00e      	beq.n	8004b3c <HAL_UART_IRQHandler+0x514>
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d008      	beq.n	8004b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f969 	bl	8004e02 <UART_EndTransmit_IT>
    return;
 8004b30:	e004      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
    return;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
      return;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
      return;
 8004b3a:	bf00      	nop
  }
}
 8004b3c:	37e8      	adds	r7, #232	; 0xe8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop

08004b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b090      	sub	sp, #64	; 0x40
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba8:	e050      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d04c      	beq.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb8:	f7fc f956 	bl	8000e68 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d241      	bcs.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004be8:	637a      	str	r2, [r7, #52]	; 0x34
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e5      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3314      	adds	r3, #20
 8004c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1c:	623a      	str	r2, [r7, #32]
 8004c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	6a3a      	ldr	r2, [r7, #32]
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e5      	bne.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e00f      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d09f      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3740      	adds	r7, #64	; 0x40
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b095      	sub	sp, #84	; 0x54
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3314      	adds	r3, #20
 8004cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e5      	bne.n	8004cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d119      	bne.n	8004d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	647b      	str	r3, [r7, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d0c:	61ba      	str	r2, [r7, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6979      	ldr	r1, [r7, #20]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e5      	bne.n	8004cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d2e:	bf00      	nop
 8004d30:	3754      	adds	r7, #84	; 0x54
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff ff09 	bl	8004b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b085      	sub	sp, #20
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b21      	cmp	r3, #33	; 0x21
 8004d74:	d13e      	bne.n	8004df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d114      	bne.n	8004daa <UART_Transmit_IT+0x48>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d110      	bne.n	8004daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	621a      	str	r2, [r3, #32]
 8004da8:	e008      	b.n	8004dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6211      	str	r1, [r2, #32]
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e000      	b.n	8004df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fe8e 	bl	8004b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b08c      	sub	sp, #48	; 0x30
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b22      	cmp	r3, #34	; 0x22
 8004e44:	f040 80ab 	bne.w	8004f9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d117      	bne.n	8004e82 <UART_Receive_IT+0x50>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d113      	bne.n	8004e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	1c9a      	adds	r2, r3, #2
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e80:	e026      	b.n	8004ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e94:	d007      	beq.n	8004ea6 <UART_Receive_IT+0x74>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <UART_Receive_IT+0x82>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e008      	b.n	8004ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4619      	mov	r1, r3
 8004ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d15a      	bne.n	8004f9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0220 	bic.w	r2, r2, #32
 8004ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d135      	bne.n	8004f90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f023 0310 	bic.w	r3, r3, #16
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4a:	623a      	str	r2, [r7, #32]
 8004f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	69f9      	ldr	r1, [r7, #28]
 8004f50:	6a3a      	ldr	r2, [r7, #32]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d10a      	bne.n	8004f82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fdf9 	bl	8004b80 <HAL_UARTEx_RxEventCallback>
 8004f8e:	e002      	b.n	8004f96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff fde1 	bl	8004b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e002      	b.n	8004fa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e000      	b.n	8004fa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
  }
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b0c0      	sub	sp, #256	; 0x100
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	68d9      	ldr	r1, [r3, #12]
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	ea40 0301 	orr.w	r3, r0, r1
 8004fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005000:	f021 010c 	bic.w	r1, r1, #12
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800500e:	430b      	orrs	r3, r1
 8005010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005022:	6999      	ldr	r1, [r3, #24]
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	ea40 0301 	orr.w	r3, r0, r1
 800502e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b8f      	ldr	r3, [pc, #572]	; (8005274 <UART_SetConfig+0x2cc>)
 8005038:	429a      	cmp	r2, r3
 800503a:	d005      	beq.n	8005048 <UART_SetConfig+0xa0>
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b8d      	ldr	r3, [pc, #564]	; (8005278 <UART_SetConfig+0x2d0>)
 8005044:	429a      	cmp	r2, r3
 8005046:	d104      	bne.n	8005052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fe ff0a 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 800504c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005050:	e003      	b.n	800505a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7fe fef1 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8005056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005064:	f040 810c 	bne.w	8005280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506c:	2200      	movs	r2, #0
 800506e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	1891      	adds	r1, r2, r2
 8005080:	65b9      	str	r1, [r7, #88]	; 0x58
 8005082:	415b      	adcs	r3, r3
 8005084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800508a:	4621      	mov	r1, r4
 800508c:	eb12 0801 	adds.w	r8, r2, r1
 8005090:	4629      	mov	r1, r5
 8005092:	eb43 0901 	adc.w	r9, r3, r1
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050aa:	4690      	mov	r8, r2
 80050ac:	4699      	mov	r9, r3
 80050ae:	4623      	mov	r3, r4
 80050b0:	eb18 0303 	adds.w	r3, r8, r3
 80050b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050b8:	462b      	mov	r3, r5
 80050ba:	eb49 0303 	adc.w	r3, r9, r3
 80050be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050d6:	460b      	mov	r3, r1
 80050d8:	18db      	adds	r3, r3, r3
 80050da:	653b      	str	r3, [r7, #80]	; 0x50
 80050dc:	4613      	mov	r3, r2
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	657b      	str	r3, [r7, #84]	; 0x54
 80050e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050ec:	f7fb f86c 	bl	80001c8 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4b61      	ldr	r3, [pc, #388]	; (800527c <UART_SetConfig+0x2d4>)
 80050f6:	fba3 2302 	umull	r2, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	011c      	lsls	r4, r3, #4
 80050fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005102:	2200      	movs	r2, #0
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800510c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	1891      	adds	r1, r2, r2
 8005116:	64b9      	str	r1, [r7, #72]	; 0x48
 8005118:	415b      	adcs	r3, r3
 800511a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005120:	4641      	mov	r1, r8
 8005122:	eb12 0a01 	adds.w	sl, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb43 0b01 	adc.w	fp, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800513c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005140:	4692      	mov	sl, r2
 8005142:	469b      	mov	fp, r3
 8005144:	4643      	mov	r3, r8
 8005146:	eb1a 0303 	adds.w	r3, sl, r3
 800514a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800514e:	464b      	mov	r3, r9
 8005150:	eb4b 0303 	adc.w	r3, fp, r3
 8005154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800516c:	460b      	mov	r3, r1
 800516e:	18db      	adds	r3, r3, r3
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
 8005172:	4613      	mov	r3, r2
 8005174:	eb42 0303 	adc.w	r3, r2, r3
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800517e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005182:	f7fb f821 	bl	80001c8 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4611      	mov	r1, r2
 800518c:	4b3b      	ldr	r3, [pc, #236]	; (800527c <UART_SetConfig+0x2d4>)
 800518e:	fba3 2301 	umull	r2, r3, r3, r1
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2264      	movs	r2, #100	; 0x64
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	1acb      	subs	r3, r1, r3
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051a2:	4b36      	ldr	r3, [pc, #216]	; (800527c <UART_SetConfig+0x2d4>)
 80051a4:	fba3 2302 	umull	r2, r3, r3, r2
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051b0:	441c      	add	r4, r3
 80051b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	1891      	adds	r1, r2, r2
 80051ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80051cc:	415b      	adcs	r3, r3
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051d4:	4641      	mov	r1, r8
 80051d6:	1851      	adds	r1, r2, r1
 80051d8:	6339      	str	r1, [r7, #48]	; 0x30
 80051da:	4649      	mov	r1, r9
 80051dc:	414b      	adcs	r3, r1
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051ec:	4659      	mov	r1, fp
 80051ee:	00cb      	lsls	r3, r1, #3
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f6:	4651      	mov	r1, sl
 80051f8:	00ca      	lsls	r2, r1, #3
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	4642      	mov	r2, r8
 8005202:	189b      	adds	r3, r3, r2
 8005204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005228:	460b      	mov	r3, r1
 800522a:	18db      	adds	r3, r3, r3
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
 800522e:	4613      	mov	r3, r2
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800523a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800523e:	f7fa ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <UART_SetConfig+0x2d4>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	2164      	movs	r1, #100	; 0x64
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	3332      	adds	r3, #50	; 0x32
 800525a:	4a08      	ldr	r2, [pc, #32]	; (800527c <UART_SetConfig+0x2d4>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f003 0207 	and.w	r2, r3, #7
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4422      	add	r2, r4
 800526e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005270:	e105      	b.n	800547e <UART_SetConfig+0x4d6>
 8005272:	bf00      	nop
 8005274:	40011000 	.word	0x40011000
 8005278:	40011400 	.word	0x40011400
 800527c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800528a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800528e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005292:	4642      	mov	r2, r8
 8005294:	464b      	mov	r3, r9
 8005296:	1891      	adds	r1, r2, r2
 8005298:	6239      	str	r1, [r7, #32]
 800529a:	415b      	adcs	r3, r3
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052a2:	4641      	mov	r1, r8
 80052a4:	1854      	adds	r4, r2, r1
 80052a6:	4649      	mov	r1, r9
 80052a8:	eb43 0501 	adc.w	r5, r3, r1
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	00eb      	lsls	r3, r5, #3
 80052b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ba:	00e2      	lsls	r2, r4, #3
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	4643      	mov	r3, r8
 80052c2:	18e3      	adds	r3, r4, r3
 80052c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052c8:	464b      	mov	r3, r9
 80052ca:	eb45 0303 	adc.w	r3, r5, r3
 80052ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052ee:	4629      	mov	r1, r5
 80052f0:	008b      	lsls	r3, r1, #2
 80052f2:	4621      	mov	r1, r4
 80052f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f8:	4621      	mov	r1, r4
 80052fa:	008a      	lsls	r2, r1, #2
 80052fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005300:	f7fa ff62 	bl	80001c8 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4b60      	ldr	r3, [pc, #384]	; (800548c <UART_SetConfig+0x4e4>)
 800530a:	fba3 2302 	umull	r2, r3, r3, r2
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	011c      	lsls	r4, r3, #4
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800531c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	1891      	adds	r1, r2, r2
 800532a:	61b9      	str	r1, [r7, #24]
 800532c:	415b      	adcs	r3, r3
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005334:	4641      	mov	r1, r8
 8005336:	1851      	adds	r1, r2, r1
 8005338:	6139      	str	r1, [r7, #16]
 800533a:	4649      	mov	r1, r9
 800533c:	414b      	adcs	r3, r1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800534c:	4659      	mov	r1, fp
 800534e:	00cb      	lsls	r3, r1, #3
 8005350:	4651      	mov	r1, sl
 8005352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005356:	4651      	mov	r1, sl
 8005358:	00ca      	lsls	r2, r1, #3
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	4603      	mov	r3, r0
 8005360:	4642      	mov	r2, r8
 8005362:	189b      	adds	r3, r3, r2
 8005364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005368:	464b      	mov	r3, r9
 800536a:	460a      	mov	r2, r1
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	67bb      	str	r3, [r7, #120]	; 0x78
 800537e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800538c:	4649      	mov	r1, r9
 800538e:	008b      	lsls	r3, r1, #2
 8005390:	4641      	mov	r1, r8
 8005392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005396:	4641      	mov	r1, r8
 8005398:	008a      	lsls	r2, r1, #2
 800539a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800539e:	f7fa ff13 	bl	80001c8 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4b39      	ldr	r3, [pc, #228]	; (800548c <UART_SetConfig+0x4e4>)
 80053a8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	3332      	adds	r3, #50	; 0x32
 80053ba:	4a34      	ldr	r2, [pc, #208]	; (800548c <UART_SetConfig+0x4e4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c6:	441c      	add	r4, r3
 80053c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053cc:	2200      	movs	r2, #0
 80053ce:	673b      	str	r3, [r7, #112]	; 0x70
 80053d0:	677a      	str	r2, [r7, #116]	; 0x74
 80053d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053d6:	4642      	mov	r2, r8
 80053d8:	464b      	mov	r3, r9
 80053da:	1891      	adds	r1, r2, r2
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	415b      	adcs	r3, r3
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053e6:	4641      	mov	r1, r8
 80053e8:	1851      	adds	r1, r2, r1
 80053ea:	6039      	str	r1, [r7, #0]
 80053ec:	4649      	mov	r1, r9
 80053ee:	414b      	adcs	r3, r1
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053fe:	4659      	mov	r1, fp
 8005400:	00cb      	lsls	r3, r1, #3
 8005402:	4651      	mov	r1, sl
 8005404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005408:	4651      	mov	r1, sl
 800540a:	00ca      	lsls	r2, r1, #3
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	4603      	mov	r3, r0
 8005412:	4642      	mov	r2, r8
 8005414:	189b      	adds	r3, r3, r2
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
 8005418:	464b      	mov	r3, r9
 800541a:	460a      	mov	r2, r1
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	663b      	str	r3, [r7, #96]	; 0x60
 800542c:	667a      	str	r2, [r7, #100]	; 0x64
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800543a:	4649      	mov	r1, r9
 800543c:	008b      	lsls	r3, r1, #2
 800543e:	4641      	mov	r1, r8
 8005440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005444:	4641      	mov	r1, r8
 8005446:	008a      	lsls	r2, r1, #2
 8005448:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800544c:	f7fa febc 	bl	80001c8 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <UART_SetConfig+0x4e4>)
 8005456:	fba3 1302 	umull	r1, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2164      	movs	r1, #100	; 0x64
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	3332      	adds	r3, #50	; 0x32
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <UART_SetConfig+0x4e4>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4422      	add	r2, r4
 800547c:	609a      	str	r2, [r3, #8]
}
 800547e:	bf00      	nop
 8005480:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548a:	bf00      	nop
 800548c:	51eb851f 	.word	0x51eb851f

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	; (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	; (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	; (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	; (80054d4 <__libc_init_array+0x44>)
 80054a4:	f000 f820 	bl	80054e8 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08005540 	.word	0x08005540
 80054cc:	08005540 	.word	0x08005540
 80054d0:	08005540 	.word	0x08005540
 80054d4:	08005544 	.word	0x08005544

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr
